{"version":3,"sources":["layout/Header.tsx","layout/index.tsx","theme/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","classes","this","props","react_default","a","createElement","react","CssBaseline_default","className","Container","Grid_default","container","item","spacing","sm","md","lg","Feed","Cover","Avatar_default","Avatar","src","PureComponent","withStyles","theme","createStyles","maxWidth","padding","unit","margin","backgroundColor","width","height","concat","boxShadow","Layout","layout_Header","Component","createMuiTheme","typography","fontSize","fontWeightRegular","useNextVariants","fontFamily","join","body1","App","core_styles","layout","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAiCMA,mLACyB,IACnBC,EAAYC,KAAKC,MAAjBF,QACR,OACEG,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,MACAD,EAAAC,EAAAC,cAAA,OAAKG,UAAWR,EAAQS,WACtBN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAMO,WAAS,EAACC,MAAI,EAACC,QAAS,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IACpDb,EAAAC,EAAAC,cAAA,OAAKG,UAAWR,EAAQiB,MACtBd,EAAAC,EAAAC,cAAA,OAAKG,UAAWR,EAAQkB,QACxBf,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACEI,UAAWR,EAAQoB,OACnBC,IACE,gKAbGC,iBAwBNC,uBAnDA,SAACC,GAAD,OAAkBC,uBAAa,CAC5ChB,UAAW,CACTiB,SAAU,IACVC,QAA8B,EAArBH,EAAMX,QAAQe,KACvBC,OAAQ,UAEVZ,KAAM,CACJa,gBAAiB,OACjBC,MAAO,QAETb,MAAO,CACLc,OAAQ,IACRD,MAAO,OACPD,gBAAiB,WAEnBV,OAAQ,CACNS,OAAM,OAAAI,OAA8B,EAArBT,EAAMX,QAAQe,KAAvB,WACNG,MAAO,IACPC,OAAQ,IACRE,UAAW,qBAgCAX,CAAmBxB,GC3CnBoC,mLARX,OACEhC,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAAC+B,EAAD,cAJaC,aCqBNb,EAvBMc,yBAAe,CAClCC,WAAY,CACVC,SAAU,GACVC,kBAAmB,IACnBC,iBAAiB,EACjBC,WAAY,CACV,gBACA,qBACA,aACA,SACA,mBACA,QACA,aACA,sBACA,mBACA,qBACAC,KAAK,KACPC,MAAO,CACLL,SAAU,WCLDM,mLARX,OACE3C,EAAAC,EAAAC,cAAC0C,EAAA,iBAAD,CAAkBvB,MAAOA,GACvBrB,EAAAC,EAAAC,cAAC2C,EAAD,cAJUX,aCOEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e4713bb0.chunk.js","sourcesContent":["import React, {PureComponent, Fragment} from \"react\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {withStyles, createStyles, WithStyles, Theme} from \"@material-ui/core/styles\";\nimport Grid from '@material-ui/core/Grid';\nimport Avatar from \"@material-ui/core/Avatar\";\n\nconst styles = (theme: Theme) => createStyles({\n  Container: {\n    maxWidth: 1000,\n    padding: theme.spacing.unit * 4,\n    margin: \"0 auto\",\n  },\n  Feed: {\n    backgroundColor: \"#FFF\",\n    width: '100%',\n  },\n  Cover: {\n    height: 200,\n    width: '100%',\n    backgroundColor: \"#CCD6DD\",\n  },\n  Avatar: {\n    margin: `-8% ${theme.spacing.unit * 2}px 14px`,\n    width: 138,\n    height: 138,\n    boxShadow: '0 0 0 4px #FFF',\n  },\n});\n\ninterface ContainerProps extends WithStyles {\n\n}\n\nclass Header extends PureComponent<ContainerProps> {\n  public render(): JSX.Element {\n    const { classes } = this.props;\n    return (\n      <Fragment>\n        <CssBaseline/>\n        <div className={classes.Container}>\n          <Grid container item spacing={16} sm={12} md={12} lg={12}>\n            <div className={classes.Feed}>\n              <div className={classes.Cover}/>\n              <Avatar\n                className={classes.Avatar}\n                src={\n                  'https://cc-media-foxit.fichub.com/image/fox-it-mondofox/e8c0f288-781d-4d0b-98ad-fd169782b53b/scene-sottacqua-per-i-sequel-di-avatar-maxw-654.jpg'\n                }\n              />\n            </div>\n          </Grid>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default withStyles(styles)(Header);\n","import React, {Component, Fragment} from \"react\";\nimport Header from \"./Header\";\n\n\nclass Layout extends Component {\n  public render() {\n    return (\n      <Fragment>\n        <Header/>\n      </Fragment>\n    );\n  }\n}\n\nexport default Layout;\n","import {createMuiTheme, Theme} from \"@material-ui/core\";\n\nconst theme: Theme = createMuiTheme({\n  typography: {\n    fontSize: 15,\n    fontWeightRegular: 500,\n    useNextVariants: true,\n    fontFamily: [\n      '-apple-system',\n      'BlinkMacSystemFont',\n      '\"Segoe UI\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(\",\"),\n    body1: {\n      fontSize: '1rem',\n    },\n  },\n});\n\nexport default theme;\n","import React, {Component} from 'react';\nimport {MuiThemeProvider} from \"@material-ui/core/styles\";\nimport Layout from \"./layout\";\nimport theme from \"./theme\";\n\nclass App extends Component {\n  public render(): JSX.Element {\n    return (\n      <MuiThemeProvider theme={theme}>\n        <Layout/>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}