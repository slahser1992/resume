{"version":3,"sources":["components/background/shaderText.ts","components/background/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["fragmentShaderPosition","fragmentShaderVelocity","birdVS","birdFS","WIDTH","Number","document","location","hash","substr","BIRDS","BirdGeometry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","triangles","points","vertices","THREE","Float32Array","birdColors","references","birdVertex","addAttribute","v","verts_push","matrix","i","length","array","f","x","y","c","r","g","b","scale","Background","run","container","getElementById","camera","window","innerWidth","innerHeight","position","z","lookAt","scene","background","fog","renderer","setPixelRatio","devicePixelRatio","setSize","appendChild","domElement","render","velocityVariable","positionVariable","positionUniforms","velocityUniforms","mouseX","mouseY","windowHalfX","windowHalfY","BOUNDS","BOUNDS_HALF","last","performance","now","gpuCompute","GPUComputationRenderer","birdUniforms","color","value","texturePosition","textureVelocity","time","delta","onWindowResize","aspect","updateProjectionMatrix","onDocumentMouseMove","event","clientX","clientY","onDocumentTouchStart","touches","preventDefault","pageX","pageY","onDocumentTouchMove","dtPosition","createTexture","dtVelocity","texture","theArray","image","data","k","kl","Math","random","fillPositionTexture","fillVelocityTexture","addVariable","setVariableDependencies","material","uniforms","defines","toFixed","wrapS","wrapT","error","init","console","initComputeRenderer","addEventListener","effectController","geometry","vertexShader","fragmentShader","side","birdMesh","rotation","PI","matrixAutoUpdate","updateMatrix","add","initBirds","animate","predator","set","compute","getCurrentRenderTarget","requestAnimationFrame","react_default","a","createElement","react","id","Component","App","className","Boolean","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.54f6025e.chunk.js","sourcesContent":["export const fragmentShaderPosition = \"uniform float time;\\n\" +\n  \"\\t\\t\\tuniform float delta;\\n\" +\n  \"\\t\\t\\tvoid main()\\t{\\n\" +\n  \"\\t\\t\\t\\tvec2 uv = gl_FragCoord.xy / resolution.xy;\\n\" +\n  \"\\t\\t\\t\\tvec4 tmpPos = texture2D( texturePosition, uv );\\n\" +\n  \"\\t\\t\\t\\tvec3 position = tmpPos.xyz;\\n\" +\n  \"\\t\\t\\t\\tvec3 velocity = texture2D( textureVelocity, uv ).xyz;\\n\" +\n  \"\\t\\t\\t\\tfloat phase = tmpPos.w;\\n\" +\n  \"\\t\\t\\t\\tphase = mod( ( phase + delta +\\n\" +\n  \"\\t\\t\\t\\t\\tlength( velocity.xz ) * delta * 3. +\\n\" +\n  \"\\t\\t\\t\\t\\tmax( velocity.y, 0.0 ) * delta * 6. ), 62.83 );\\n\" +\n  \"\\t\\t\\t\\tgl_FragColor = vec4( position + velocity * delta * 15. , phase );\\n\" +\n  \"\\t\\t\\t}\";\n\nexport const fragmentShaderVelocity = \"uniform float time;\\n\" +\n  \"\\t\\t\\tuniform float testing;\\n\" +\n  \"\\t\\t\\tuniform float delta; // about 0.016\\n\" +\n  \"\\t\\t\\tuniform float separationDistance; // 20\\n\" +\n  \"\\t\\t\\tuniform float alignmentDistance; // 40\\n\" +\n  \"\\t\\t\\tuniform float cohesionDistance; //\\n\" +\n  \"\\t\\t\\tuniform float freedomFactor;\\n\" +\n  \"\\t\\t\\tuniform vec3 predator;\\n\" +\n  \"\\t\\t\\tconst float width = resolution.x;\\n\" +\n  \"\\t\\t\\tconst float height = resolution.y;\\n\" +\n  \"\\t\\t\\tconst float PI = 3.141592653589793;\\n\" +\n  \"\\t\\t\\tconst float PI_2 = PI * 2.0;\\n\" +\n  \"\\t\\t\\t// const float VISION = PI * 0.55;\\n\" +\n  \"\\t\\t\\tfloat zoneRadius = 40.0;\\n\" +\n  \"\\t\\t\\tfloat zoneRadiusSquared = 1600.0;\\n\" +\n  \"\\t\\t\\tfloat separationThresh = 0.45;\\n\" +\n  \"\\t\\t\\tfloat alignmentThresh = 0.65;\\n\" +\n  \"\\t\\t\\tconst float UPPER_BOUNDS = BOUNDS;\\n\" +\n  \"\\t\\t\\tconst float LOWER_BOUNDS = -UPPER_BOUNDS;\\n\" +\n  \"\\t\\t\\tconst float SPEED_LIMIT = 9.0;\\n\" +\n  \"\\t\\t\\tfloat rand( vec2 co ){\\n\" +\n  \"\\t\\t\\t\\treturn fract( sin( dot( co.xy, vec2(12.9898,78.233) ) ) * 43758.5453 );\\n\" +\n  \"\\t\\t\\t}\\n\" +\n  \"\\t\\t\\tvoid main() {\\n\" +\n  \"\\t\\t\\t\\tzoneRadius = separationDistance + alignmentDistance + cohesionDistance;\\n\" +\n  \"\\t\\t\\t\\tseparationThresh = separationDistance / zoneRadius;\\n\" +\n  \"\\t\\t\\t\\talignmentThresh = ( separationDistance + alignmentDistance ) / zoneRadius;\\n\" +\n  \"\\t\\t\\t\\tzoneRadiusSquared = zoneRadius * zoneRadius;\\n\" +\n  \"\\t\\t\\t\\tvec2 uv = gl_FragCoord.xy / resolution.xy;\\n\" +\n  \"\\t\\t\\t\\tvec3 birdPosition, birdVelocity;\\n\" +\n  \"\\t\\t\\t\\tvec3 selfPosition = texture2D( texturePosition, uv ).xyz;\\n\" +\n  \"\\t\\t\\t\\tvec3 selfVelocity = texture2D( textureVelocity, uv ).xyz;\\n\" +\n  \"\\t\\t\\t\\tfloat dist;\\n\" +\n  \"\\t\\t\\t\\tvec3 dir; // direction\\n\" +\n  \"\\t\\t\\t\\tfloat distSquared;\\n\" +\n  \"\\t\\t\\t\\tfloat separationSquared = separationDistance * separationDistance;\\n\" +\n  \"\\t\\t\\t\\tfloat cohesionSquared = cohesionDistance * cohesionDistance;\\n\" +\n  \"\\t\\t\\t\\tfloat f;\\n\" +\n  \"\\t\\t\\t\\tfloat percent;\\n\" +\n  \"\\t\\t\\t\\tvec3 velocity = selfVelocity;\\n\" +\n  \"\\t\\t\\t\\tfloat limit = SPEED_LIMIT;\\n\" +\n  \"\\t\\t\\t\\tdir = predator * UPPER_BOUNDS - selfPosition;\\n\" +\n  \"\\t\\t\\t\\tdir.z = 0.;\\n\" +\n  \"\\t\\t\\t\\t// dir.z *= 0.6;\\n\" +\n  \"\\t\\t\\t\\tdist = length( dir );\\n\" +\n  \"\\t\\t\\t\\tdistSquared = dist * dist;\\n\" +\n  \"\\t\\t\\t\\tfloat preyRadius = 150.0;\\n\" +\n  \"\\t\\t\\t\\tfloat preyRadiusSq = preyRadius * preyRadius;\\n\" +\n  \"\\t\\t\\t\\t// move birds away from predator\\n\" +\n  \"\\t\\t\\t\\tif ( dist < preyRadius ) {\\n\" +\n  \"\\t\\t\\t\\t\\tf = ( distSquared / preyRadiusSq - 1.0 ) * delta * 100.;\\n\" +\n  \"\\t\\t\\t\\t\\tvelocity += normalize( dir ) * f;\\n\" +\n  \"\\t\\t\\t\\t\\tlimit += 5.0;\\n\" +\n  \"\\t\\t\\t\\t}\\n\" +\n  \"\\t\\t\\t\\t// if (testing == 0.0) {}\\n\" +\n  \"\\t\\t\\t\\t// if ( rand( uv + time ) < freedomFactor ) {}\\n\" +\n  \"\\t\\t\\t\\t// Attract flocks to the center\\n\" +\n  \"\\t\\t\\t\\tvec3 central = vec3( 0., 0., 0. );\\n\" +\n  \"\\t\\t\\t\\tdir = selfPosition - central;\\n\" +\n  \"\\t\\t\\t\\tdist = length( dir );\\n\" +\n  \"\\t\\t\\t\\tdir.y *= 2.5;\\n\" +\n  \"\\t\\t\\t\\tvelocity -= normalize( dir ) * delta * 5.;\\n\" +\n  \"\\t\\t\\t\\tfor ( float y = 0.0; y < height; y++ ) {\\n\" +\n  \"\\t\\t\\t\\t\\tfor ( float x = 0.0; x < width; x++ ) {\\n\" +\n  \"\\t\\t\\t\\t\\t\\tvec2 ref = vec2( x + 0.5, y + 0.5 ) / resolution.xy;\\n\" +\n  \"\\t\\t\\t\\t\\t\\tbirdPosition = texture2D( texturePosition, ref ).xyz;\\n\" +\n  \"\\t\\t\\t\\t\\t\\tdir = birdPosition - selfPosition;\\n\" +\n  \"\\t\\t\\t\\t\\t\\tdist = length( dir );\\n\" +\n  \"\\t\\t\\t\\t\\t\\tif ( dist < 0.0001 ) continue;\\n\" +\n  \"\\t\\t\\t\\t\\t\\tdistSquared = dist * dist;\\n\" +\n  \"\\t\\t\\t\\t\\t\\tif ( distSquared > zoneRadiusSquared ) continue;\\n\" +\n  \"\\t\\t\\t\\t\\t\\tpercent = distSquared / zoneRadiusSquared;\\n\" +\n  \"\\t\\t\\t\\t\\t\\tif ( percent < separationThresh ) { // low\\n\" +\n  \"\\t\\t\\t\\t\\t\\t\\t// Separation - Move apart for comfort\\n\" +\n  \"\\t\\t\\t\\t\\t\\t\\tf = ( separationThresh / percent - 1.0 ) * delta;\\n\" +\n  \"\\t\\t\\t\\t\\t\\t\\tvelocity -= normalize( dir ) * f;\\n\" +\n  \"\\t\\t\\t\\t\\t\\t} else if ( percent < alignmentThresh ) { // high\\n\" +\n  \"\\t\\t\\t\\t\\t\\t\\t// Alignment - fly the same direction\\n\" +\n  \"\\t\\t\\t\\t\\t\\t\\tfloat threshDelta = alignmentThresh - separationThresh;\\n\" +\n  \"\\t\\t\\t\\t\\t\\t\\tfloat adjustedPercent = ( percent - separationThresh ) / threshDelta;\\n\" +\n  \"\\t\\t\\t\\t\\t\\t\\tbirdVelocity = texture2D( textureVelocity, ref ).xyz;\\n\" +\n  \"\\t\\t\\t\\t\\t\\t\\tf = ( 0.5 - cos( adjustedPercent * PI_2 ) * 0.5 + 0.5 ) * delta;\\n\" +\n  \"\\t\\t\\t\\t\\t\\t\\tvelocity += normalize( birdVelocity ) * f;\\n\" +\n  \"\\t\\t\\t\\t\\t\\t} else {\\n\" +\n  \"\\t\\t\\t\\t\\t\\t\\t// Attraction / Cohesion - move closer\\n\" +\n  \"\\t\\t\\t\\t\\t\\t\\tfloat threshDelta = 1.0 - alignmentThresh;\\n\" +\n  \"\\t\\t\\t\\t\\t\\t\\tfloat adjustedPercent = ( percent - alignmentThresh ) / threshDelta;\\n\" +\n  \"\\t\\t\\t\\t\\t\\t\\tf = ( 0.5 - ( cos( adjustedPercent * PI_2 ) * -0.5 + 0.5 ) ) * delta;\\n\" +\n  \"\\t\\t\\t\\t\\t\\t\\tvelocity += normalize( dir ) * f;\\n\" +\n  \"\\t\\t\\t\\t\\t\\t}\\n\" +\n  \"\\t\\t\\t\\t\\t}\\n\" +\n  \"\\t\\t\\t\\t}\\n\" +\n  \"\\t\\t\\t\\t// this make tends to fly around than down or up\\n\" +\n  \"\\t\\t\\t\\t// if (velocity.y > 0.) velocity.y *= (1. - 0.2 * delta);\\n\" +\n  \"\\t\\t\\t\\t// Speed Limits\\n\" +\n  \"\\t\\t\\t\\tif ( length( velocity ) > limit ) {\\n\" +\n  \"\\t\\t\\t\\t\\tvelocity = normalize( velocity ) * limit;\\n\" +\n  \"\\t\\t\\t\\t}\\n\" +\n  \"\\t\\t\\t\\tgl_FragColor = vec4( velocity, 1.0 );\\n\" +\n  \"\\t\\t\\t}\\n\";\n\nexport const birdVS = \"attribute vec2 reference;\\n\" +\n  \"\\t\\t\\tattribute float birdVertex;\\n\" +\n  \"\\t\\t\\tattribute vec3 birdColor;\\n\" +\n  \"\\t\\t\\tuniform sampler2D texturePosition;\\n\" +\n  \"\\t\\t\\tuniform sampler2D textureVelocity;\\n\" +\n  \"\\t\\t\\tvarying vec4 vColor;\\n\" +\n  \"\\t\\t\\tvarying float z;\\n\" +\n  \"\\t\\t\\tuniform float time;\\n\" +\n  \"\\t\\t\\tvoid main() {\\n\" +\n  \"\\t\\t\\t\\tvec4 tmpPos = texture2D( texturePosition, reference );\\n\" +\n  \"\\t\\t\\t\\tvec3 pos = tmpPos.xyz;\\n\" +\n  \"\\t\\t\\t\\tvec3 velocity = normalize(texture2D( textureVelocity, reference ).xyz);\\n\" +\n  \"\\t\\t\\t\\tvec3 newPosition = position;\\n\" +\n  \"\\t\\t\\t\\tif ( birdVertex == 4.0 || birdVertex == 7.0 ) {\\n\" +\n  \"\\t\\t\\t\\t\\t// flap wings\\n\" +\n  \"\\t\\t\\t\\t\\tnewPosition.y = sin( tmpPos.w ) * 5.;\\n\" +\n  \"\\t\\t\\t\\t}\\n\" +\n  \"\\t\\t\\t\\tnewPosition = mat3( modelMatrix ) * newPosition;\\n\" +\n  \"\\t\\t\\t\\tvelocity.z *= -1.;\\n\" +\n  \"\\t\\t\\t\\tfloat xz = length( velocity.xz );\\n\" +\n  \"\\t\\t\\t\\tfloat xyz = 1.;\\n\" +\n  \"\\t\\t\\t\\tfloat x = sqrt( 1. - velocity.y * velocity.y );\\n\" +\n  \"\\t\\t\\t\\tfloat cosry = velocity.x / xz;\\n\" +\n  \"\\t\\t\\t\\tfloat sinry = velocity.z / xz;\\n\" +\n  \"\\t\\t\\t\\tfloat cosrz = x / xyz;\\n\" +\n  \"\\t\\t\\t\\tfloat sinrz = velocity.y / xyz;\\n\" +\n  \"\\t\\t\\t\\tmat3 maty =  mat3(\\n\" +\n  \"\\t\\t\\t\\t\\tcosry, 0, -sinry,\\n\" +\n  \"\\t\\t\\t\\t\\t0    , 1, 0     ,\\n\" +\n  \"\\t\\t\\t\\t\\tsinry, 0, cosry\\n\" +\n  \"\\t\\t\\t\\t);\\n\" +\n  \"\\t\\t\\t\\tmat3 matz =  mat3(\\n\" +\n  \"\\t\\t\\t\\t\\tcosrz , sinrz, 0,\\n\" +\n  \"\\t\\t\\t\\t\\t-sinrz, cosrz, 0,\\n\" +\n  \"\\t\\t\\t\\t\\t0     , 0    , 1\\n\" +\n  \"\\t\\t\\t\\t);\\n\" +\n  \"\\t\\t\\t\\tnewPosition =  maty * matz * newPosition;\\n\" +\n  \"\\t\\t\\t\\tnewPosition += pos;\\n\" +\n  \"\\t\\t\\t\\tz = newPosition.z;\\n\" +\n  \"\\t\\t\\t\\tvColor = vec4( birdColor, 1.0 );\\n\" +\n  \"\\t\\t\\t\\tgl_Position = projectionMatrix *  viewMatrix  * vec4( newPosition, 1.0 );\\n\" +\n  \"\\t\\t\\t}\\n\";\n\nexport const birdFS = \"varying vec4 vColor;\\n\" +\n  \"\\t\\t\\tvarying float z;\\n\" +\n  \"\\t\\t\\tuniform vec3 color;\\n\" +\n  \"\\t\\t\\tvoid main() {\\n\" +\n  \"\\t\\t\\t\\t// Fake colors for now\\n\" +\n  \"\\t\\t\\t\\tfloat z2 = 0.2 + ( 1000. - z ) / 1000. * vColor.x;\\n\" +\n  \"\\t\\t\\t\\tgl_FragColor = vec4( z2, z2, z2, 1. );\\n\" +\n  \"\\t\\t\\t}\";\n","import React, {Component, Fragment} from \"react\";\nimport * as THREE from \"three\";\nimport { GPUComputationRenderer, GPUComputationRendererVariable } from \"gpucomputationrender-three\";\nimport {fragmentShaderPosition, fragmentShaderVelocity, birdFS, birdVS} from \"./shaderText\";\nimport {PositionUniform, VelocityUniform, BirdsUniform} from \"./interface\"\n\nlet hash: number = Number(document.location.hash.substr(1));\nconst WIDTH = hash || 32;\nconst BIRDS = WIDTH * WIDTH;\n\nclass BirdGeometry extends THREE.BufferGeometry {\n  constructor() {\n    super();\n\n    const triangles = BIRDS * 3;\n    const points = triangles * 3;\n\n    const vertices = new THREE.BufferAttribute(new Float32Array(points * 3), 3);\n    const birdColors = new THREE.BufferAttribute(new Float32Array(points * 3), 3);\n\n    const references = new THREE.BufferAttribute(new Float32Array(points * 2), 2);\n    const birdVertex = new THREE.BufferAttribute(new Float32Array(points), 1);\n\n    this.addAttribute('position', vertices);\n    this.addAttribute('birdColor', birdColors);\n    this.addAttribute('reference', references);\n    this.addAttribute('birdVertex', birdVertex);\n\n    let v = 0;\n\n    function verts_push(matrix: any[]) {\n      for (let i = 0; i < matrix.length; i++) {\n        // @ts-ignore\n        vertices.array[v++] = matrix[i];\n      }\n    }\n\n    const wingsSpan = 20;\n    for (let f = 0; f < BIRDS; f++) {\n      // Body\n      verts_push(\n        [0, -0, -20,\n          0, 4, -20,\n          0, 0, 30]\n      );\n      // Left Wing\n      verts_push(\n        [0, 0, -15,\n          -wingsSpan, 0, 0,\n          0, 0, 15]\n      );\n      // Right Wing\n      verts_push(\n        [0, 0, 15,\n          wingsSpan, 0, 0,\n          0, 0, -15]\n      );\n    }\n\n    for ( let v = 0; v < triangles * 3; v ++ ) {\n      const i = ~ ~ ( v / 3 );\n      const x = ( i % WIDTH ) / WIDTH;\n      const y = ~ ~ ( i / WIDTH ) / WIDTH;\n      const c = new THREE.Color(\n        0x444444 +\n        ~ ~ ( v / 9 ) / BIRDS * 0x666666\n      );\n      // @ts-ignore\n      birdColors.array[ v * 3 ] = c.r;\n      // @ts-ignore\n      birdColors.array[ v * 3 + 1 ] = c.g;\n      // @ts-ignore\n      birdColors.array[ v * 3 + 2 ] = c.b;\n      // @ts-ignore\n      references.array[ v * 2 ] = x;\n      // @ts-ignore\n      references.array[ v * 2 + 1 ] = y;\n      // @ts-ignore\n      birdVertex.array[ v ] = v % 9;\n    }\n    this.scale(0.2, 0.2, 0.2);\n  }\n}\n\nclass Background extends Component{\n\n  componentDidMount() {\n    this.run();\n  }\n\n  run() {\n    let container = document.getElementById(\"gl-container\") as HTMLElement;\n\n    let camera = new THREE.PerspectiveCamera(75, window.innerWidth/ window.innerHeight, 1, 3000);\n    camera.position.z = 350;\n    camera.lookAt(0, 0, 0);\n\n    let scene = new THREE.Scene();\n    scene.background = new THREE.Color( 0xFFFFFF );\n    scene.fog = new THREE.Fog( 0xFFFFFF, 100, 1000 );\n\n    let renderer = new THREE.WebGLRenderer();\n    renderer.setPixelRatio( window.devicePixelRatio );\n    renderer.setSize( window.innerWidth, window.innerHeight );\n\n    container.appendChild(renderer.domElement);\n    renderer.render(scene, camera);\n\n    let mouseX = 0, mouseY = 0;\n    let windowHalfX = window.innerWidth / 2;\n    let windowHalfY = window.innerHeight / 2;\n    const BOUNDS = 800, BOUNDS_HALF = BOUNDS / 2;\n\n    let last = performance.now();\n    const gpuCompute = new GPUComputationRenderer( WIDTH, WIDTH, renderer );\n    let velocityVariable: GPUComputationRendererVariable;\n    let positionVariable: GPUComputationRendererVariable;\n    let positionUniforms : PositionUniform;\n    let velocityUniforms: VelocityUniform;\n    const birdUniforms: BirdsUniform = {\n      \"color\": { value: new THREE.Color( 0xff2200 ) },\n      \"texturePosition\": { value: null },\n      \"textureVelocity\": { value: null },\n      \"time\": { value: 1.0 },\n      \"delta\": { value: 0.0 }\n    };\n\n    function init() {\n\n      initComputeRenderer();\n      document.addEventListener( 'mousemove', onDocumentMouseMove, false );\n      document.addEventListener( 'touchstart', onDocumentTouchStart, false );\n      document.addEventListener( 'touchmove', onDocumentTouchMove, false );\n      //\n      window.addEventListener( 'resize', onWindowResize, false );\n      const effectController = {\n        separation: 20.0,\n        alignment: 20.0,\n        cohesion: 20.0,\n        freedom: 0.75\n      };\n      const valuesChanger = function () {\n        velocityUniforms[ \"separationDistance\" ].value = effectController.separation;\n        velocityUniforms[ \"alignmentDistance\" ].value = effectController.alignment;\n        velocityUniforms[ \"cohesionDistance\" ].value = effectController.cohesion;\n        velocityUniforms[ \"freedomFactor\" ].value = effectController.freedom;\n      };\n      valuesChanger();\n\n      initBirds();\n    }\n\n    function initComputeRenderer() {\n      const dtPosition = gpuCompute.createTexture();\n      const dtVelocity = gpuCompute.createTexture();\n      fillPositionTexture( dtPosition );\n      fillVelocityTexture( dtVelocity );\n      velocityVariable = gpuCompute.addVariable( \"textureVelocity\", fragmentShaderVelocity, dtVelocity );\n      positionVariable = gpuCompute.addVariable( \"texturePosition\", fragmentShaderPosition, dtPosition );\n      gpuCompute.setVariableDependencies( velocityVariable, [ positionVariable, velocityVariable ] );\n      gpuCompute.setVariableDependencies( positionVariable, [ positionVariable, velocityVariable ] );\n      positionUniforms = positionVariable.material.uniforms;\n      velocityUniforms = velocityVariable.material.uniforms;\n      positionUniforms[ \"time\" ] = { value: 0.0 };\n      positionUniforms[ \"delta\" ] = { value: 0.0 };\n      velocityUniforms[ \"time\" ] = { value: 1.0 };\n      velocityUniforms[ \"delta\" ] = { value: 0.0 };\n      velocityUniforms[ \"testing\" ] = { value: 1.0 };\n      velocityUniforms[ \"separationDistance\" ] = { value: 1.0 };\n      velocityUniforms[ \"alignmentDistance\" ] = { value: 1.0 };\n      velocityUniforms[ \"cohesionDistance\" ] = { value: 1.0 };\n      velocityUniforms[ \"freedomFactor\" ] = { value: 1.0 };\n      velocityUniforms[ \"predator\" ] = { value: new THREE.Vector3() };\n      velocityVariable.material.defines.BOUNDS = BOUNDS.toFixed( 2 );\n      velocityVariable.wrapS = THREE.RepeatWrapping;\n      velocityVariable.wrapT = THREE.RepeatWrapping;\n      positionVariable.wrapS = THREE.RepeatWrapping;\n      positionVariable.wrapT = THREE.RepeatWrapping;\n      const error = gpuCompute.init();\n      if ( error !== null ) {\n        console.error( error );\n      }\n    }\n\n    function initBirds() {\n      const geometry = new BirdGeometry();\n\n      // ShaderMaterial\n      const material = new THREE.ShaderMaterial( {\n        uniforms: birdUniforms,\n        vertexShader: birdVS,\n        fragmentShader: birdFS,\n        side: THREE.DoubleSide\n      } );\n      const birdMesh = new THREE.Mesh( geometry, material );\n      birdMesh.rotation.y = Math.PI / 2;\n      birdMesh.matrixAutoUpdate = false;\n      birdMesh.updateMatrix();\n      scene.add( birdMesh );\n    }\n\n    function fillPositionTexture( texture: THREE.Texture ) {\n      const theArray = texture.image.data;\n      for ( let k = 0, kl = theArray.length; k < kl; k += 4 ) {\n        const x = Math.random() * BOUNDS - BOUNDS_HALF;\n        const y = Math.random() * BOUNDS - BOUNDS_HALF;\n        const z = Math.random() * BOUNDS - BOUNDS_HALF;\n        theArray[ k ] = x;\n        theArray[ k + 1 ] = y;\n        theArray[ k + 2 ] = z;\n        theArray[ k + 3 ] = 1;\n      }\n    }\n\n    function fillVelocityTexture( texture: THREE.Texture ) {\n      const theArray = texture.image.data;\n      for ( let k = 0, kl = theArray.length; k < kl; k += 4 ) {\n        const x = Math.random() - 0.5;\n        const y = Math.random() - 0.5;\n        const z = Math.random() - 0.5;\n        theArray[ k ] = x * 10;\n        theArray[ k + 1 ] = y * 10;\n        theArray[ k + 2 ] = z * 10;\n        theArray[ k + 3 ] = 1;\n      }\n    }\n\n    function onWindowResize() {\n      windowHalfX = window.innerWidth / 2;\n      windowHalfY = window.innerHeight / 2;\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize( window.innerWidth, window.innerHeight );\n    }\n    function onDocumentMouseMove( event: MouseEvent ) {\n      mouseX = event.clientX - windowHalfX;\n      mouseY = event.clientY - windowHalfY;\n    }\n    function onDocumentTouchStart( event: TouchEvent ) {\n      if ( event.touches.length === 1 ) {\n        event.preventDefault();\n        mouseX = event.touches[ 0 ].pageX - windowHalfX;\n        mouseY = event.touches[ 0 ].pageY - windowHalfY;\n      }\n    }\n    function onDocumentTouchMove( event: TouchEvent ) {\n      if ( event.touches.length === 1 ) {\n        event.preventDefault();\n        mouseX = event.touches[ 0 ].pageX - windowHalfX;\n        mouseY = event.touches[ 0 ].pageY - windowHalfY;\n      }\n    }\n\n    function animate() {\n      render();\n      requestAnimationFrame( animate );\n    }\n\n    function render() {\n      const now = performance.now();\n      let delta = ( now - last ) / 1000;\n      if ( delta > 1 ) delta = 1; // safety cap on large deltas\n      last = now;\n      positionUniforms.time.value = now;\n      positionUniforms.delta.value = delta;\n      velocityUniforms.time.value = now;\n      velocityUniforms.delta.value = delta;\n      birdUniforms.time.value = now;\n      birdUniforms.delta.value = delta;\n      velocityUniforms.predator.value.set(0.5 * mouseX / windowHalfX, - 0.5 * mouseY / windowHalfY, 0 );\n      mouseX = 10000;\n      mouseY = 10000;\n      gpuCompute.compute();\n      birdUniforms.texturePosition.value = gpuCompute.getCurrentRenderTarget( positionVariable ).texture;\n      birdUniforms.textureVelocity.value = gpuCompute.getCurrentRenderTarget( velocityVariable ).texture;\n      renderer.render( scene, camera );\n    }\n    init();\n    animate();\n  }\n\n\n  render() {\n    return (\n      <Fragment>\n        <div id={\"gl-container\"}/>\n      </Fragment>\n    )\n  }\n}\n\nexport default Background\n","import React from 'react';\nimport Background from \"./components/background\";\nimport './App.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n     <Background/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}