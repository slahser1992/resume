(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{10:function(t,e,n){t.exports=n(20)},16:function(t,e,n){},19:function(t,e,n){},20:function(t,e,n){"use strict";n.r(e);var o=n(1),i=n.n(o),a=n(7),r=n.n(a),l=(n(16),n(8)),s=n(2),c=n(4),d=n(3),u=n(5),f=n(0),v=n(9),m="uniform float time;\n\t\t\tuniform float delta;\n\t\t\tvoid main()\t{\n\t\t\t\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t\t\t\tvec4 tmpPos = texture2D( texturePosition, uv );\n\t\t\t\tvec3 position = tmpPos.xyz;\n\t\t\t\tvec3 velocity = texture2D( textureVelocity, uv ).xyz;\n\t\t\t\tfloat phase = tmpPos.w;\n\t\t\t\tphase = mod( ( phase + delta +\n\t\t\t\t\tlength( velocity.xz ) * delta * 3. +\n\t\t\t\t\tmax( velocity.y, 0.0 ) * delta * 6. ), 62.83 );\n\t\t\t\tgl_FragColor = vec4( position + velocity * delta * 15. , phase );\n\t\t\t}",h="uniform float time;\n\t\t\tuniform float testing;\n\t\t\tuniform float delta; // about 0.016\n\t\t\tuniform float separationDistance; // 20\n\t\t\tuniform float alignmentDistance; // 40\n\t\t\tuniform float cohesionDistance; //\n\t\t\tuniform float freedomFactor;\n\t\t\tuniform vec3 predator;\n\t\t\tconst float width = resolution.x;\n\t\t\tconst float height = resolution.y;\n\t\t\tconst float PI = 3.141592653589793;\n\t\t\tconst float PI_2 = PI * 2.0;\n\t\t\t// const float VISION = PI * 0.55;\n\t\t\tfloat zoneRadius = 40.0;\n\t\t\tfloat zoneRadiusSquared = 1600.0;\n\t\t\tfloat separationThresh = 0.45;\n\t\t\tfloat alignmentThresh = 0.65;\n\t\t\tconst float UPPER_BOUNDS = BOUNDS;\n\t\t\tconst float LOWER_BOUNDS = -UPPER_BOUNDS;\n\t\t\tconst float SPEED_LIMIT = 9.0;\n\t\t\tfloat rand( vec2 co ){\n\t\t\t\treturn fract( sin( dot( co.xy, vec2(12.9898,78.233) ) ) * 43758.5453 );\n\t\t\t}\n\t\t\tvoid main() {\n\t\t\t\tzoneRadius = separationDistance + alignmentDistance + cohesionDistance;\n\t\t\t\tseparationThresh = separationDistance / zoneRadius;\n\t\t\t\talignmentThresh = ( separationDistance + alignmentDistance ) / zoneRadius;\n\t\t\t\tzoneRadiusSquared = zoneRadius * zoneRadius;\n\t\t\t\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\t\t\t\tvec3 birdPosition, birdVelocity;\n\t\t\t\tvec3 selfPosition = texture2D( texturePosition, uv ).xyz;\n\t\t\t\tvec3 selfVelocity = texture2D( textureVelocity, uv ).xyz;\n\t\t\t\tfloat dist;\n\t\t\t\tvec3 dir; // direction\n\t\t\t\tfloat distSquared;\n\t\t\t\tfloat separationSquared = separationDistance * separationDistance;\n\t\t\t\tfloat cohesionSquared = cohesionDistance * cohesionDistance;\n\t\t\t\tfloat f;\n\t\t\t\tfloat percent;\n\t\t\t\tvec3 velocity = selfVelocity;\n\t\t\t\tfloat limit = SPEED_LIMIT;\n\t\t\t\tdir = predator * UPPER_BOUNDS - selfPosition;\n\t\t\t\tdir.z = 0.;\n\t\t\t\t// dir.z *= 0.6;\n\t\t\t\tdist = length( dir );\n\t\t\t\tdistSquared = dist * dist;\n\t\t\t\tfloat preyRadius = 150.0;\n\t\t\t\tfloat preyRadiusSq = preyRadius * preyRadius;\n\t\t\t\t// move birds away from predator\n\t\t\t\tif ( dist < preyRadius ) {\n\t\t\t\t\tf = ( distSquared / preyRadiusSq - 1.0 ) * delta * 100.;\n\t\t\t\t\tvelocity += normalize( dir ) * f;\n\t\t\t\t\tlimit += 5.0;\n\t\t\t\t}\n\t\t\t\t// if (testing == 0.0) {}\n\t\t\t\t// if ( rand( uv + time ) < freedomFactor ) {}\n\t\t\t\t// Attract flocks to the center\n\t\t\t\tvec3 central = vec3( 0., 0., 0. );\n\t\t\t\tdir = selfPosition - central;\n\t\t\t\tdist = length( dir );\n\t\t\t\tdir.y *= 2.5;\n\t\t\t\tvelocity -= normalize( dir ) * delta * 5.;\n\t\t\t\tfor ( float y = 0.0; y < height; y++ ) {\n\t\t\t\t\tfor ( float x = 0.0; x < width; x++ ) {\n\t\t\t\t\t\tvec2 ref = vec2( x + 0.5, y + 0.5 ) / resolution.xy;\n\t\t\t\t\t\tbirdPosition = texture2D( texturePosition, ref ).xyz;\n\t\t\t\t\t\tdir = birdPosition - selfPosition;\n\t\t\t\t\t\tdist = length( dir );\n\t\t\t\t\t\tif ( dist < 0.0001 ) continue;\n\t\t\t\t\t\tdistSquared = dist * dist;\n\t\t\t\t\t\tif ( distSquared > zoneRadiusSquared ) continue;\n\t\t\t\t\t\tpercent = distSquared / zoneRadiusSquared;\n\t\t\t\t\t\tif ( percent < separationThresh ) { // low\n\t\t\t\t\t\t\t// Separation - Move apart for comfort\n\t\t\t\t\t\t\tf = ( separationThresh / percent - 1.0 ) * delta;\n\t\t\t\t\t\t\tvelocity -= normalize( dir ) * f;\n\t\t\t\t\t\t} else if ( percent < alignmentThresh ) { // high\n\t\t\t\t\t\t\t// Alignment - fly the same direction\n\t\t\t\t\t\t\tfloat threshDelta = alignmentThresh - separationThresh;\n\t\t\t\t\t\t\tfloat adjustedPercent = ( percent - separationThresh ) / threshDelta;\n\t\t\t\t\t\t\tbirdVelocity = texture2D( textureVelocity, ref ).xyz;\n\t\t\t\t\t\t\tf = ( 0.5 - cos( adjustedPercent * PI_2 ) * 0.5 + 0.5 ) * delta;\n\t\t\t\t\t\t\tvelocity += normalize( birdVelocity ) * f;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Attraction / Cohesion - move closer\n\t\t\t\t\t\t\tfloat threshDelta = 1.0 - alignmentThresh;\n\t\t\t\t\t\t\tfloat adjustedPercent = ( percent - alignmentThresh ) / threshDelta;\n\t\t\t\t\t\t\tf = ( 0.5 - ( cos( adjustedPercent * PI_2 ) * -0.5 + 0.5 ) ) * delta;\n\t\t\t\t\t\t\tvelocity += normalize( dir ) * f;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// this make tends to fly around than down or up\n\t\t\t\t// if (velocity.y > 0.) velocity.y *= (1. - 0.2 * delta);\n\t\t\t\t// Speed Limits\n\t\t\t\tif ( length( velocity ) > limit ) {\n\t\t\t\t\tvelocity = normalize( velocity ) * limit;\n\t\t\t\t}\n\t\t\t\tgl_FragColor = vec4( velocity, 1.0 );\n\t\t\t}\n",y="attribute vec2 reference;\n\t\t\tattribute float birdVertex;\n\t\t\tattribute vec3 birdColor;\n\t\t\tuniform sampler2D texturePosition;\n\t\t\tuniform sampler2D textureVelocity;\n\t\t\tvarying vec4 vColor;\n\t\t\tvarying float z;\n\t\t\tuniform float time;\n\t\t\tvoid main() {\n\t\t\t\tvec4 tmpPos = texture2D( texturePosition, reference );\n\t\t\t\tvec3 pos = tmpPos.xyz;\n\t\t\t\tvec3 velocity = normalize(texture2D( textureVelocity, reference ).xyz);\n\t\t\t\tvec3 newPosition = position;\n\t\t\t\tif ( birdVertex == 4.0 || birdVertex == 7.0 ) {\n\t\t\t\t\t// flap wings\n\t\t\t\t\tnewPosition.y = sin( tmpPos.w ) * 5.;\n\t\t\t\t}\n\t\t\t\tnewPosition = mat3( modelMatrix ) * newPosition;\n\t\t\t\tvelocity.z *= -1.;\n\t\t\t\tfloat xz = length( velocity.xz );\n\t\t\t\tfloat xyz = 1.;\n\t\t\t\tfloat x = sqrt( 1. - velocity.y * velocity.y );\n\t\t\t\tfloat cosry = velocity.x / xz;\n\t\t\t\tfloat sinry = velocity.z / xz;\n\t\t\t\tfloat cosrz = x / xyz;\n\t\t\t\tfloat sinrz = velocity.y / xyz;\n\t\t\t\tmat3 maty =  mat3(\n\t\t\t\t\tcosry, 0, -sinry,\n\t\t\t\t\t0    , 1, 0     ,\n\t\t\t\t\tsinry, 0, cosry\n\t\t\t\t);\n\t\t\t\tmat3 matz =  mat3(\n\t\t\t\t\tcosrz , sinrz, 0,\n\t\t\t\t\t-sinrz, cosrz, 0,\n\t\t\t\t\t0     , 0    , 1\n\t\t\t\t);\n\t\t\t\tnewPosition =  maty * matz * newPosition;\n\t\t\t\tnewPosition += pos;\n\t\t\t\tz = newPosition.z;\n\t\t\t\tvColor = vec4( birdColor, 1.0 );\n\t\t\t\tgl_Position = projectionMatrix *  viewMatrix  * vec4( newPosition, 1.0 );\n\t\t\t}\n",p="varying vec4 vColor;\n\t\t\tvarying float z;\n\t\t\tuniform vec3 color;\n\t\t\tvoid main() {\n\t\t\t\t// Fake colors for now\n\t\t\t\tfloat z2 = 0.2 + ( 1000. - z ) / 1000. * vColor.x;\n\t\t\t\tgl_FragColor = vec4( z2, z2, z2, 1. );\n\t\t\t}",w=Number(document.location.hash.substr(1))||32,g=w*w,x=function(t){function e(){var t;Object(s.a)(this,e),t=Object(c.a)(this,Object(d.a)(e).call(this));var n=3*g,o=3*n,i=new f.BufferAttribute(new Float32Array(3*o),3),a=new f.BufferAttribute(new Float32Array(3*o),3),r=new f.BufferAttribute(new Float32Array(2*o),2),l=new f.BufferAttribute(new Float32Array(o),1);t.addAttribute("position",i),t.addAttribute("birdColor",a),t.addAttribute("reference",r),t.addAttribute("birdVertex",l);var u=0;function v(t){for(var e=0;e<t.length;e++)i.array[u++]=t[e]}for(var m=0;m<g;m++)v([0,-0,-20,0,4,-20,0,0,30]),v([0,0,-15,-20,0,0,0,0,15]),v([0,0,15,20,0,0,0,0,-15]);for(var h=0;h<3*n;h++){var y=~~(h/3),p=y%w/w,x=~~(y/w)/w,z=new f.Color(4473924+~~(h/9)/g*6710886);a.array[3*h]=z.r,a.array[3*h+1]=z.g,a.array[3*h+2]=z.b,r.array[2*h]=p,r.array[2*h+1]=x,l.array[h]=h%9}return t.scale(.2,.2,.2),t}return Object(u.a)(e,t),e}(f.BufferGeometry),z=function(t){function e(){return Object(s.a)(this,e),Object(c.a)(this,Object(d.a)(e).apply(this,arguments))}return Object(u.a)(e,t),Object(l.a)(e,[{key:"componentDidMount",value:function(){this.run()}},{key:"run",value:function(){var t=document.getElementById("gl-container"),e=new f.PerspectiveCamera(75,window.innerWidth/window.innerHeight,1,3e3);e.position.z=350,e.lookAt(0,0,0);var n=new f.Scene;n.background=new f.Color(16777215),n.fog=new f.Fog(16777215,100,1e3);var o=new f.WebGLRenderer;o.setPixelRatio(window.devicePixelRatio),o.setSize(window.innerWidth,window.innerHeight),t.appendChild(o.domElement),o.render(n,e);var i,a,r,l,s=0,c=0,d=window.innerWidth/2,u=window.innerHeight/2,g=800,z=g/2,P=performance.now(),b=new v.GPUComputationRenderer(w,w,o),D={color:{value:new f.Color(16720384)},texturePosition:{value:null},textureVelocity:{value:null},time:{value:1},delta:{value:0}};function S(){d=window.innerWidth/2,u=window.innerHeight/2,e.aspect=window.innerWidth/window.innerHeight,e.updateProjectionMatrix(),o.setSize(window.innerWidth,window.innerHeight)}function R(t){s=t.clientX-d,c=t.clientY-u}function V(t){1===t.touches.length&&(t.preventDefault(),s=t.touches[0].pageX-d,c=t.touches[0].pageY-u)}function C(t){1===t.touches.length&&(t.preventDefault(),s=t.touches[0].pageX-d,c=t.touches[0].pageY-u)}!function(){!function(){var t=b.createTexture(),e=b.createTexture();(function(t){for(var e=t.image.data,n=0,o=e.length;n<o;n+=4){var i=Math.random()*g-z,a=Math.random()*g-z,r=Math.random()*g-z;e[n]=i,e[n+1]=a,e[n+2]=r,e[n+3]=1}})(t),function(t){for(var e=t.image.data,n=0,o=e.length;n<o;n+=4){var i=Math.random()-.5,a=Math.random()-.5,r=Math.random()-.5;e[n]=10*i,e[n+1]=10*a,e[n+2]=10*r,e[n+3]=1}}(e),i=b.addVariable("textureVelocity",h,e),a=b.addVariable("texturePosition",m,t),b.setVariableDependencies(i,[a,i]),b.setVariableDependencies(a,[a,i]),r=a.material.uniforms,l=i.material.uniforms,r.time={value:0},r.delta={value:0},l.time={value:1},l.delta={value:0},l.testing={value:1},l.separationDistance={value:1},l.alignmentDistance={value:1},l.cohesionDistance={value:1},l.freedomFactor={value:1},l.predator={value:new f.Vector3},i.material.defines.BOUNDS=g.toFixed(2),i.wrapS=f.RepeatWrapping,i.wrapT=f.RepeatWrapping,a.wrapS=f.RepeatWrapping,a.wrapT=f.RepeatWrapping;var n=b.init();null!==n&&console.error(n)}(),document.addEventListener("mousemove",R,!1),document.addEventListener("touchstart",V,!1),document.addEventListener("touchmove",C,!1),window.addEventListener("resize",S,!1);var t=20,e=20,o=20,s=.75;l.separationDistance.value=t,l.alignmentDistance.value=e,l.cohesionDistance.value=o,l.freedomFactor.value=s,function(){var t=new x,e=new f.ShaderMaterial({uniforms:D,vertexShader:y,fragmentShader:p,side:f.DoubleSide}),o=new f.Mesh(t,e);o.rotation.y=Math.PI/2,o.matrixAutoUpdate=!1,o.updateMatrix(),n.add(o)}()}(),function t(){!function(){var t=performance.now(),f=(t-P)/1e3;f>1&&(f=1),P=t,r.time.value=t,r.delta.value=f,l.time.value=t,l.delta.value=f,D.time.value=t,D.delta.value=f,l.predator.value.set(.5*s/d,-.5*c/u,0),s=1e4,c=1e4,b.compute(),D.texturePosition.value=b.getCurrentRenderTarget(a).texture,D.textureVelocity.value=b.getCurrentRenderTarget(i).texture,o.render(n,e)}(),requestAnimationFrame(t)}()}},{key:"render",value:function(){return i.a.createElement(o.Fragment,null,i.a.createElement("div",{id:"gl-container"}))}}]),e}(o.Component),P=(n(19),function(){return i.a.createElement("div",{className:"App"},i.a.createElement(z,null))});Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));r.a.render(i.a.createElement(P,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then(function(t){t.unregister()})}},[[10,1,2]]]);
//# sourceMappingURL=main.54f6025e.chunk.js.map